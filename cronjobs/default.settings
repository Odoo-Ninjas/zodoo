RUN_CRONJOBS=1
JOB_BACKUP_ODOO_DB=odoo backup odoo-db $DB_ODOO_FILEFORMAT --dumptype $DB_ODOO_DUMPTYPE

JOB_DADDY_CLEANUP=odoo daddy-cleanup /host/dumps/$DB_ODOO_SEARCHFORMAT --dont-touch 1
JOB_KEEP_LAST_FILE_OF_DAY=odoo keep-latest-file-of-day /host/dumps/$DB_ODOO_SEARCHFORMAT --doNt-touch 1
JOB_VACUUM=odoo psql --sql "vacuum full"

JOB_CLEAN_LONG_RUNNING_QUERIES=postgres.py exec $DBNAME $DB_HOST $DB_PORT $DB_USER $DB_PWD "SELECT pid, now() - pg_stat_activity.query_start AS duration, query, state INTO temp_pids FROM pg_stat_activity WHERE (now() - pg_stat_activity.query_start) > interval '120 minutes';select * from temp_pids; select pg_cancel_backend(pid) from temp_pids;"\;
JOB_KILL_DB_LOCKS=postgres.py exec $DBNAME $DB_HOST $DB_PORT $DB_USER $DB_PWD "select * into temporary table locks from lock_monitor where blocked_query not ilike 'ir_cron' and extract(epoch from waiting_duration) > 20; select * from locks; select pg_terminate_backend(blocked_pid) from locks; select * from locks;"\;

#CRONJOB_TEST=* * * * * * odoo backup odoo-db /tmp/1...........
#CRONJOB_TEST1=* * * * * * echo test cronjobi1

CRONJOB_BACKUP_FILES=0 0 * * * odoo backup files /host/dumps/${DBNAME}.files; ls -lhtra /host/dumps



JOB_RESTART_UNHEALTHY_CONTAINERS=/bin/bash restart_unhealthy_containers.sh
CRONJOB_RESTART_UNHEALTHY_CONTAINERS=* * * * * $JOB_RESTART_UNHEALTHY_CONTAINERS